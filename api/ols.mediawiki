= LogicSniffer =

Some documentation on the LogicSniffer client.

== Architecture ==

The client will be entirely OSGi-based. Reasons to chose for this is that all projects 
are loosely coupled and can be upgraded individually. In addition, OSGi provides the
ability to load/unload native libraries for the correct operating system out of the box. 

A description of the current projects is given in the following paragraphs.

=== RXTX ===

Provides the serial I/O routines for communicating with serial devices, such as the 
LogicSniffer. It integrates the native libraries for various operating systems. 
Currently, the following operating systems are supported:

* Windows 32/64 bits;
* Linux 32/64 bits;
* Mac OSX 64 bits.

=== API ===

Provides the common API (maybe "common API" would be a better name?) shared between the 
client, tools and devices. This project does nothing on its own but provides some common
code for the rest of the projects.

The idea is to have only interfaces in the API-project, but this is currently not the 
case. For example the AnnotatedData implementation is used by several other projects,
and is a concrete class instead of an interface. To really solve this, one would need an
additional project that provides common implementations. 

=== Client ===

Provides the actual UI of the client and forms the "glue" between devices, tools and UI.
The client project is more or less an empty "shell" that allows devices and tools to be 
added dynamically. The UI is entirely Swing based.

=== Devices ===

Provides support for the actual devices, such as the LogicSniffer and a testing device. 
A device contains everything to actually work with the device, from low-level 
communications to configuration UI and interfacing logic with the rest of the client.

=== Tools ===

Provides analysis, measurement and other tools that can provide additional information 
about captured data. Most of the current tools do some "heavy" processing of data, which
should be done in the background to keep the UI responsive. To make writing such tools
easier, a "base" tool is provided which provides most of the boilerplate code. 

=== Runner ===

Provides a small "bootstrap" for the OSGi container. This project is the only non-OSGi 
project. It provides the only "main" method in all projects and this main should start
the OSGi container with some predefined configuration and let the OSGi container do the
remainder of the work. Currently, Felix 3.0 is used as OSGi container.

=== Logging ===

Provides a logging "bridge" for Java's native logging functionality and OSGi Logging 
service. It allows classes to log using Java's native logging functionality 
(java.util.logging) which will be redirected to a OSGi log service under water. 
 
=== Util ===

Provides some common utilities that are shared among all other projects. 


== To do ==

# <strike>restore project functionality;</strike>
# <strike>upon opening windows for the second time, the properties aren't read/reset;</strike>
# <strike>make the order of tools in the menu predictable;</strike>
# <strike>add a preference pane for the "general" client configuration;</strike>
# make channel numbering uniform across entire platform;
# provide support for exporting a diagram to PNG/JPEG/...;
# show timing measurements between edges, or from rising to rising or falling to falling edges;
# configurable colors would be nice, so that the user can set them to match the probes;
# integrate analysis reports & annotations into one and make it configurable which one is shown/used;
# make the annotated data configurable regarding the displayed text and colors;
# make it configurable whether state-transitions are straight or diagonal;
# make distinction between decoding tools and other tools;
# provide easier access to analysis tools;
# analysis protocol results synopsis (client: <bla bla>, master: <bla bla>, client ...);
# support reordering of channels with DnD;
