/*
 * OpenBench LogicSniffer / SUMP project 
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 *
 * 
 * Copyright (C) 2010-2011 - J.W. Janssen, http://www.lxtreme.nl
 */
package nl.lxtreme.ols.client.ui.icons;


import java.awt.*;
import java.net.*;

import javax.swing.*;

import nl.lxtreme.ols.util.swing.component.icon.*;


/**
 * Provides some convenience methods for handling icons.
 */
public final class IconFactory
{
  // INNER TYPES

  /**
   * Denotes a compound icon consisting of an icon with some text overlay.
   */
  public static class CompoundTextIcon extends TextOverlayIcon
  {
    // CONSTANTS

    private static final long serialVersionUID = 1L;

    // CONSTRUCTORS

    /**
     * Creates a new CompoundTextIcon instance, placing the text in the center.
     * 
     * @param aIconName
     *          the (symbolic) name of the icon;
     * @param aTextOverlay
     *          the text that is to overlayed;
     */
    public CompoundTextIcon( final String aIconName, final String aTextOverlay )
    {
      super( createIcon( aIconName ), aTextOverlay );
    }

    /**
     * Creates a new CompoundTextIcon instance, placing the text at the given
     * position.
     * 
     * @param aIconName
     *          the (symbolic) name of the icon;
     * @param aTextOverlay
     *          the text that is to overlayed;
     * @param aPosition
     *          on of the {@link SwingConstants} values that denotes the overlay
     *          position. E.g.: {@link SwingConstants#NORTH_EAST}.
     */
    public CompoundTextIcon( final String aIconName, final String aTextOverlay, final int aPosition )
    {
      super( createIcon( aIconName ), aTextOverlay, aPosition );
    }
  }

  // CONSTANTS

  private static final byte[] DEFAULT_IMG = { 0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x09, 0x00, 0x09, 0x00, ( byte )0xf7,
      0x00, 0x00, ( byte )0xdb, ( byte )0xdb, ( byte )0xb7, ( byte )0xfc, ( byte )0xfc, ( byte )0xfa, ( byte )0xeb,
      ( byte )0xeb, ( byte )0xd6, ( byte )0xe6, ( byte )0xe6, ( byte )0xcc, ( byte )0xfc, ( byte )0xfd, ( byte )0xfa,
      ( byte )0xd7, ( byte )0xd6, ( byte )0xad, ( byte )0xeb, ( byte )0xeb, ( byte )0xd7, ( byte )0xf0, ( byte )0xf0,
      ( byte )0xe1, ( byte )0xef, ( byte )0xf0, ( byte )0xe1, ( byte )0xe0, ( byte )0xe1, ( byte )0xc2, ( byte )0xf4,
      ( byte )0xf4, ( byte )0xea, ( byte )0xdb, ( byte )0xdc, ( byte )0xb8, ( byte )0xe5, ( byte )0xe6, ( byte )0xcc,
      ( byte )0xf5, ( byte )0xf5, ( byte )0xea, ( byte )0xea, ( byte )0xeb, ( byte )0xd7, ( byte )0xe5, ( byte )0xe5,
      ( byte )0xcc, ( byte )0xf4, ( byte )0xf5, ( byte )0xeb, ( byte )0xf5, ( byte )0xf4, ( byte )0xeb, ( byte )0xd2,
      ( byte )0xd2, ( byte )0xa5, ( byte )0xe0, ( byte )0xe0, ( byte )0xc2, ( byte )0xf0, ( byte )0xf0, ( byte )0xe0,
      ( byte )0x80, ( byte )0x80, ( byte )0x80, ( byte )0xf9, ( byte )0xf9, ( byte )0xf3, 0x33, 0x00, ( byte )0xcc,
      ( byte )0xff, ( byte )0xff, ( byte )0xff, ( byte )0x99, ( byte )0x99, ( byte )0x99, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x21, ( byte )0xf9, 0x04, 0x01, 0x00, 0x00, 0x1a, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09,
      0x00, 0x00, 0x08, 0x44, 0x00, 0x2b, 0x64, 0x18, 0x48, 0x30, ( byte )0x83, 0x40, 0x0c, 0x08, 0x09, 0x58,
      ( byte )0x88, 0x70, 0x60, 0x60, 0x42, 0x0b, 0x10, 0x28, 0x18, 0x70, 0x18, ( byte )0xc0, ( byte )0x82,
      ( byte )0x85, 0x03, 0x06, 0x1e, 0x0c, 0x0c, 0x50, ( byte )0xf1, ( byte )0xa2, ( byte )0x81, 0x09, 0x03, 0x2d,
      0x34, ( byte )0xa0, 0x20, ( byte )0x80, ( byte )0xc1, ( byte )0x84, 0x05, 0x03, 0x15, 0x20, 0x10, 0x30, 0x60,
      0x02, ( byte )0x80, 0x02, 0x03, 0x29, 0x38, 0x18, ( byte )0x90, ( byte )0xe0, ( byte )0xa5, 0x04, ( byte )0x83,
      0x05, 0x09, 0x56, 0x08, 0x08, 0x00, 0x3b };

  // CONSTRUCTORS

  /**
   * Creates a new IconFactory, never used.
   */
  private IconFactory()
  {
    super();
  }

  // METHODS

  /**
   * Creates an icon for the resource with the given name.
   * 
   * @param aIconName
   *          the (symbolic) name of the resource to load as icon, cannot be
   *          <code>null</code>.
   * @return the icon for the given resource name, never <code>null</code>.
   */
  public static Icon createIcon( final String aIconName )
  {
    try
    {
      URL url = IconFactory.class.getResource( aIconName );
      if ( url != null )
      {
        return new ImageIcon( url );
      }
    }
    catch ( Exception exception )
    {
      exception.printStackTrace();
    }
    return new ImageIcon( DEFAULT_IMG );
  }

  /**
   * Creates an image for the resource with the given name.
   * 
   * @param aIconName
   *          the (symbolic) name of the resource to load as image, cannot be
   *          <code>null</code>.
   * @return the image for the given resource name, never <code>null</code>.
   */
  public static Image createImage( final String aImageName )
  {
    final URL url = IconLocator.class.getResource( aImageName );
    return Toolkit.getDefaultToolkit().createImage( url );
  }

  /**
   * Creates an icon with a text overlay positioned at the south east corner of
   * the icon.
   * 
   * @param aIconName
   *          the (symbolic) name of the resource to load as icon, cannot be
   *          <code>null</code>;
   * @param aText
   *          the text to overlay, cannot be <code>null</code>.
   * @return the icon for the given resource name, never <code>null</code>.
   */
  public static Icon createOverlayIcon( final String aIconName, final String aText )
  {
    return new CompoundTextIcon( aIconName, aText, SwingConstants.EAST );
  }
}
